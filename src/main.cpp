#include "lua.hpp"
#include <vector>
#include <list>
#include <time.h>
#include <string>
#include <fstream>
#include <algorithm>
using namespace std;

list< vector<string> > emotes;

int addEmote( lua_State *l );

int main(int argc, char** argv) {
    srand(time(0));
    lua* l = new lua();
    l->addFunction( "AddEmote", addEmote );
    l->doFile( "emotes.lua" );
    string key = l->getString( "key" );
    string file = l->getString( "outfile" );
    string filter = l->getString( "filter" );
    string prepend = l->getString( "prepend" );
    bool shuffle = l->getBool( "shuffle" );
    bool echo = l->getBool( "echo" );
    vector< vector<string> > newmotes;
    delete l;
    if ( filter.length() > 0 ) {
        list< vector<string> >::iterator i;
        for( i=emotes.begin();i!=emotes.end();++i ) {
            vector<string> emote = *i;
            for ( unsigned int o=0;o<emote.size();o++ ) {
                string str = emote[o];
                if ( str.find( filter ) != str.npos ) {
                    newmotes.push_back( emote );
                    break;
                }
            }
        }
    } else {
        list< vector<string> >::iterator i;
        for( i=emotes.begin();i!=emotes.end();++i ) {
            newmotes.push_back( *i );
        }
    }
    if ( shuffle ) {
        random_shuffle( newmotes.begin(), newmotes.end() );
    }
    ofstream f(file.c_str(), ofstream::out);
    if ( !f.good() ) {
        return 1;
    }
    f << "// Generated by gemote (github.com/naelstrof/gemote)\n\n";
    f << "echo \"gemote script loaded!\"\n";
    f << "echo \"Press " << key << " to be an obnoxious asshole.\"\n";
    f << "echo \"If you haven't yet, you will have to bind " << key << " to " << prepend << "0.\"\n";
    int c = 0;
    for( unsigned int i=0;i<newmotes.size();i++ ) {
        vector<string> emote = newmotes[i];
        string str = emote[0];
        if ( c > 0 ) {
            f << c << "\"\"\n";
        }
        f << "alias " << prepend << c++ << " \"say " << str;
        if ( echo ) {
            f << ";echo \"" << str << "\"";
        }
        f << ";bind " << key << " \"" << prepend;
    }
    f << "0\"\"\n";
    f.close();
    return 0;
}

int addEmote( lua_State* l ) {
    vector<string> emote;
    emote.push_back( luaL_checkstring(l,1) );
    switch( lua_type(l,2) ) {
        case LUA_TSTRING:
            emote.push_back( luaL_checkstring(l,2) );
            break;
        case LUA_TTABLE:
            lua_pushnil(l);
            while( lua_next(l,2) ) {
                emote.push_back( luaL_checkstring(l,-1) );
                lua_pop(l,1);
            }
            break;
    }
    int args = lua_gettop(l)+1;
    for (int i=3;i<args;i++) {
        luaL_checkany(l,i);
    }
    emotes.push_back( emote );
    return 0;
}
